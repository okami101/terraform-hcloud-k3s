terraform {
  required_providers {
    hcloud = {
      source = "hetznercloud/hcloud"
    }
  }
}

provider "hcloud" {
  # Here is the required hcloud API token with RW access in order to create all needed resources.
  token = "xxxxxx"
}

module "hcloud_k3s" {
  providers = {
    hcloud = hcloud
  }

  source = "okami101/hcloud-k3s"

  # Next all self-explanatory variables that you can customized. See https://registry.terraform.io/modules/okami101/k3s/hcloud/latest?tab=inputs for description.

  server_image    = "ubuntu-22.04"
  server_location = "nbg1"
  server_timezone = "Europe/Paris"
  server_locale   = "fr_FR.UTF-8"

  # Install nfs-common in order to have working nfs provisioners on kubernetes storage classes.
  server_packages = ["nfs-common"]

  # Use preferably something different than default 22.
  ssh_port = 2222

  # All hostname will use it as a prefix, aka <cluster_name>-worker-01, etc.
  cluster_name = "k3s"
  # The unix user for ssh login.
  cluster_user = "kube"

  # Your required public ssh key for ssh access through all nodes.
  my_public_ssh_key = "ssh-ed25519 xxxxxx"
  # Put your fixed public ip here, heavily recommended for protecting ssh and kube server api port access on bastion server, default to any.
  my_ip_addresses = ["0.0.0.0/0", "::/0"]

  # Use stable (production usage) or latest (staging usage).
  k3s_channel = "stable"

  # Additional TLS-SANs for kube-api server.
  # tls_sans = ["cp.cluster.my.org"]

  # Disable included k3s traefik ingress controller.
  disabled_components = ["traefik"]
  # All advanced parameters for each kubelet, see https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/.
  kubelet_args = []

  control_planes = {
    server_type = "cx21"
    # In hetzner, private_interface is the interface name for private network, ens10 is the default one for intel nics, enp7s0 for amd nics.
    private_interface = "ens10"
    # The number of control planes. For proper HA, use an odd number, 1, 3, 5, etc. Note as the 1st control plane will be the default bastion server, and will be used as main entry for any SSH access to any nodes.
    count = 1
    # Use taints to prevent pods to be scheduled on control planes.
    taints = [
      "node-role.kubernetes.io/master:NoSchedule"
    ]
  }

  # Here is the worker nodes, categorized according to unique typology (defined as a pool) of servers, taints, etc.
  agent_nodepools = [
    {
      # Will define the final hostname, aka <cluster_name>-worker-01, etc.
      name              = "worker"
      server_type       = "cx21"
      private_interface = "ens10"
      # You can use next optional attribute to define the range private IP index for the nodepool. It allows to move items in the list without breaking the IP range.
      private_ip_index  = 0
      # The number of nodes in this pool. The main parameter for autoscaling.
      count = 3
      # No taint, can accept any workloads.
      taints = []
    },
    {
      # Here is an example of a nodepool with a different server type, and a taint. Typically used for database oriented nodes.
      name              = "data"
      server_type       = "cx31"
      private_interface = "ens10"
      private_ip_index  = 1
      count             = 1
      taints = [
        "node-role.kubernetes.io/data:NoSchedule"
      ]
    }
  ]

  # The type of load balancer.
  lb_type = "lb11"
  # The above nodepool to be load balanced. These nodes should have a proper ingress controller installed, as traefik.
  lb_target = "worker"
}

resource "hcloud_load_balancer_service" "http_service" {
  load_balancer_id = module.hcloud_k3s.lb_id
  protocol         = "tcp"
  listen_port      = 80
  destination_port = 80
}

resource "hcloud_load_balancer_service" "https_service" {
  load_balancer_id = module.hcloud_k3s.lb_id
  protocol         = "tcp"
  listen_port      = 443
  destination_port = 443
  proxyprotocol    = true
}

output "bastion_ip" {
  value = module.hcloud_k3s.bastion_ip
}

output "controller_ips" {
  value = module.hcloud_k3s.controller_ips
}

output "lb_ip" {
  value = module.hcloud_k3s.lb_ip
}

output "ssh_config" {
  value = module.hcloud_k3s.ssh_config
}
